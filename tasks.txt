TODO:
	server:
		- add email notifier service that will send email with available favorites
		- add rabbitmq message receiver service that will call email notifier service subscribe method
		- add rabbitmq api to subscribe to email

	- add redis cache
	- add rabbitmq container for sending emails
	- add docker compose service for email 
	- Do refactoring


IN PROGRESS:
	frontend:
		- fix login (add login button on header that should open a modal widow
			which contains oauth2.0 buttons)
	server:
		- change all gorm storage to sqlx

DONE:
	frontend:
		- add Login required popup on favorite buttons
		- add Repository class to make api calls
		- fix token usage, use refresh token if access token is expired
		- add onclick event on table row to
			change favorite state and send request to backend
		- add permission for setting favorits 
			(user should be authenticated for change proxy favorite status)
		- add favorite icon to rows
		- add User icon to header
		- add useApiV2 to frontend for getting users
		- add google icon to header for google auth
		- add Github icon to header for auth (soon)
		- add Mail.ru icon to header for auth (soon)
	server:
		- add GetUserByRefreshToken function that will return user by refresh token
			to userStorage
		- fix gorm delete method
		- fix favorits endpoint
		- add UserStorage interface
		- add sqlx UserStorage
		- add refresh endpoint for jwt
		- add jwt service for auth
		- add jwt middleware
		- add google auth2.0 api (login, callback)
		- add favorits endpoint
		- add favorits router
		- add Favorits table in db (userId, proxyId)
		- add User table in db to store user info (email, name, id)
		- add User storage (gorm) to store user info

	- fix dotenv usage  (delete dotenv from frontend and admin 
		and add env variables to dotenv in root folder)
	- add Session table to associate jwt with user
	- fix apps cofigurations structure
