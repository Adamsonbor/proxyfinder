services:
  api:
    image: golang:1.22
    container_name: proxyfinder-api-dev
    command: sh -c "cd /app && make up-api-dev"
    environment:
      - CGO_ENABLED=1
    volumes:
      - ./server:/app
      - $GOPATH/pkg/mod:/go/pkg/mod
      - $GOPATH/bin:/go/bin
    ports:
      - 8080:8080
    depends_on:
      migrate:
        condition: service_completed_successfully
      rabbit:
        condition: service_healthy
    restart: always

  rabbit:
    image: rabbitmq:3.13-management-alpine
    container_name: proxyfinder-rabbit-dev
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      start_period: 5s
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  scheduler:
    image: golang:1.22
    container_name: proxyfinder-scheduler-dev
    command: sh -c "cd /app && make up-scheduler-dev"
    volumes:
      - ./server:/app
      - $GOPATH/pkg/mod:/go/pkg/mod
      - $GOPATH/bin:/go/bin
    depends_on:
      migrate:
        condition: service_completed_successfully
    restart: always

  # mail:
  #   image: golang:1.22
  #   container_name: proxyfinder-mail-dev
  #   command: sh -c "cd /app && make up-mail-dev"
  #   volumes:
  #     - ./server:/app
  #     - $GOPATH/pkg/mod:/go/pkg/mod
  #     - $GOPATH/bin:/go/bin
  #   depends_on:
  #     rabbit:
  #       condition: service_healthy

  migrate:
    image: golang:1.22
    container_name: proxyfinder-migrate-dev
    # command: bash -c "
    #   cd /app && \
    #   go run cmd/goose/main.go --dir migrations/goose sqlite3 storage/local.db up && \
    #   go run cmd/initdb/main.go --dir migrations/init/geonode --db storage/local.db up"
    volumes:
      - ./server:/app
      - $GOPATH/pkg/mod:/go/pkg/mod
      - $GOPATH/bin:/go/bin

  frontend:
    image: node:20-alpine
    container_name: proxyfinder-frontend-dev
    ports:
      - 80:80
    working_dir: /app
    volumes:
      - ./frontend:/app
    command: sh -c "yarn && yarn dev"
    restart: always
    depends_on:
      - api
  
  admin:
    image: node:20-alpine
    container_name: proxyfinder-admin-dev
    ports:
      - 3000:3000
    working_dir: /app
    volumes:
      - ./admin:/app
    command: sh -c "yarn && yarn dev"
    restart: always
    depends_on:
      - api
